/* # # # # # # # # # # Documentation # # # # # # # # # # */
// Author:  Des
// Date:    11/14/2019
// Purpose: Generates a map for the tanks to move around on
/* # # # # # # # # # # # # # # # # # # # # # # # # # # # */

testing = {
   text: [
       "11111111___W_______________________________________D___________________________________W___33333333",
       "11111111___W___________________________________________________________________________W___33333333",
       "11111111___W_____________________W_____________________________O_______________________W___33333333",
       "11111111___W___________D_________W_____________________________________________________W___33333333",
       "11111111___W_____________________W_____N_________O_____________________________________W___33333333",
       "11111111___W_____________________W_____________________________________________________W___33333333",
       "11111111___W_____________________WWWWWWWWW_____________________________________________W___33333333",
       "11111111___W_________________________________________________________W_________________W___33333333",
       "_____________________________________________________________________W_____________________________",
       "______________________D_________________________________D____________W___________D_________________",
       "____________________________________________O________________________W_____________________________",
       "11111111___W_________________________________________________________O_________________W___33333333",
       "11111111___W__________________________________________________________W________________W___33333333",
       "11111111___W_________________________________________________________W_________________W___33333333",
       "11111111___W______________O_________________W___________O___________W__________________W___33333333",
       "11111111___W________________________________W______________________W___________________W___33333333",
       "11111111___W________________________________W_____________________W____________________W___33333333",
       "11111111___W________________________________W__________________________________________W___33333333",
       "11111111___W___________________________________________________________________________W___33333333",
       "___________________________________________________________________________________________________",
       "________________________________D___________W________________WWWW__________________________________",
       "____________________________________________W______________________________________________________",
       "11111111___W________________________________W__________________________________________W___33333333",
       "11111111___W________________________________W____________________________D_____________W___33333333",
       "11111111___W________________________________W_______________O__________________________W___33333333",
       "11111111___W_______________O________________W__________________________________________W___33333333",
       "11111111___W________________________________W__________________________________________W___33333333",
       "11111111___W________________________________W__________________________________________W___33333333",
       "11111111___W________________________________W__________________________________________W___33333333",
       "11111111___W________D__________________________________________________________________W___33333333",
       "____________________________________________________________________O______________________________",
       "___________________________________________________________________________________________________",
       "__________________________________________WW_______________________________________________________",
       "11111111___W________________________________WW_________________________________________W___33333333",
       "11111111___W__________________________________W________________________________________W___33333333",
       "11111111___W_____________O_____________________W_______________________________________W___33333333",
       "11111111___W____________________________________W______________________________________W___33333333",
       "11111111___W____________________________________W______________________________________W___33333333",
       "11111111___W_____________________________________W_____________________________________W___33333333",
       "11111111___W_____________D_______________________W_____________________________________W___33333333",
       "11111111___W___________________________________________________________________________W___33333333",
       "WWWWWWWWWWWW____________________________O______________________________________________WWWWWWWWWWWW",
       "___________________________________________________________________________________________________",
       "_______________________________________________________________________W___________________________",
       "_____________________________________________________________WWWWWWWWWWW___________________________",
       "______________________W______________________________________W_________W___________________________",
       "_____________________W_______________________________________W____N____WWWWWWW_____________________",
       "____________________W________________________________________W_________W___________________________",
       "______D____________W_________________________________________W_________W___________________________",
       "__________________W____________D________________BB_____________________W___________________________",
       "_________________W______________________________BB_____________________W___________________________",
       "________________W__________________________________________________________________________________",
       "________________W__________________________________________________________________________________",
       "________________W__________________________________________________________________________________",
       "________________W____________________________________________W_____________________________________",
       "_____________________________________________________________W_____________________________________",
       "_____________________________D____________________D__________W_____________________________________",
       "_____________________________________________________________W_____________________________________",
       "WWWWWWWWWWWW_________________________________________________W_________________________WWWWWWWWWWWW",
       "44444444___W________________________________________________W__________________________W___22222222",
       "44444444___W_______________________________________________W___________D_______________W___22222222",
       "44444444___W______________________________________________W____________________________W___22222222",
       "44444444___W__________________________________________WWWW_____________________________W___22222222",
       "44444444___W____________________D______________________________________________________W___22222222",
       "44444444___W___________________________________________________________________________W___22222222",
       "44444444___W___________________________________________________________________________W___22222222",
       "44444444___W___________________________________________________________________________W___22222222",
       "___________________________________________________________________________________________________",
       "____________________________________W______________________________________________________________",
       "_____________________________________W_____________________________________________________________",
       "44444444___W__________________________W________________________________________________W___22222222",
       "44444444___W___________________________W________D______________________________________W___22222222",
       "44444444___W____________________________W______________________________________________W___22222222",
       "44444444___W_____________________________W_____________________________________________W___22222222",
       "44444444___W_____________________________W_______________________W_____________________W___22222222",
       "44444444___W_____________________________W_______________________W_____________________W___22222222",
       "44444444___W_____________________________W_______________________W_____________________W___22222222",
       "44444444___W_____________________________W______________________W______________________W___22222222",
       "______________________D__________________WWWWWWWW_______________W_______D__________________________",
       "________________________________________________________________W__________________________________",
       "_______________________________________________________________W___________________________________",
       "44444444___W___________________________________________________W_______________________W___22222222",
       "44444444___W___________________________________________________W_______________________W___22222222",
       "44444444___W_______________________W__________________________W________________________W___22222222",
       "44444444___W_______________________W___________________________________________________W___22222222",
       "44444444___W_______________________W_______________________O___________________________W___22222222",
       "44444444___W_______________________WWWWWW______________________________________________W___22222222",
       "44444444___W______________________W_________________________O__________________________W___22222222",
       "44444444___W_____________________W__________________________W__________________________W___22222222",
       "________________________________W__________________________W______________D________________________",
       "_______________________________W__________________________W________________________________________",
       "______________________________W__________________________W_________________________________________",
       "44444444___W__________________________D_________________W______________________________W___22222222",
       "44444444___W___________________________________________W_______________________________W___22222222",
       "44444444___W___________________________________________W_______________________________W___22222222",
       "44444444___W___________________________________________W_______________________________W___22222222",
       "44444444___W________________D__________________________W_______________________________W___22222222",
       "44444444___W_________________D_________________________W_________________D_____________W___22222222",
       "44444444___W___________________________________________________________________________W___22222222",
       "44444444___W___________________________________________________________________________W___22222222"
   ]
}

/* # # # # # # # # # # Documentation # # # # # # # # # # */
class Map {
   // Takes a text file and interprets the characters in it to create an array of the various spaces
      constructor(jObj) {
      // Set up starting zone arrays
      this.sz_t1 = [];
      this.sz_t2 = [];
      this.sz_t3 = [];
      this.sz_t4 = [];
      this.sz_t5 = [];
      this.sz_t6 = [];
      this.sz_t7 = [];
      this.sz_t8 = [];
      this.sz_t9 = [];

      // Set up wall/obstacle array
      this.features = [];
      this.dropZone = [];
      this.buzzSpawn = [];
      this.nukeSpawn = [];

      // Load the map
      // TODO: LOAD TXT FILE INTO ARRAY OF ROW ARRAYS HOLDING COLUMNS
      // To set up a map, look at the MapSetupAndLegend.txt in the maps folder

      // For now, just have a string:
      var testMap = [];
      var row0 = ['1', '_', '_', '_', '_', '_', '_', '_', '_', '4'];

      var row1 = ['1', '_', '_', '_', '_', '_', '_', '_', '_', '4'];

      var row2 = ['1', '_', 'O', '_', '_', '_', '_', '_', '_', '4'];

      var row3 = ['1', '_', '_', '_', 'W', '_', '_', 'O', '_', '4'];

      var row4 = ['1', '_', '_', '_', 'W', '_', '_', '_', '_', '4'];

      var row5 = ['W', 'W', 'W', '_', 'W', '_', '_', 'W', 'W', 'W'];

      var row6 = ['3', 'O', '_', '_', 'W', '_', '_', '_', '_', '2'];

      var row7 = ['3', '_', '_', '_', 'W', '_', 'O', '_', '_', '2'];

      var row8 = ['3', '_', '_', '_', '_', '_', '_', '_', '_', '2'];

      var row9 = ['3', '_', '_', '_', '_', '_', '_', '_', '_', '2'];

      testMap.push(row0);
      testMap.push(row1);
      testMap.push(row2);
      testMap.push(row3);
      testMap.push(row4);
      testMap.push(row5);
      testMap.push(row6);
      testMap.push(row7);
      testMap.push(row8);
      testMap.push(row9);

      // let finalMap = mapText;
      let finalMap = testing.text;

      // Set up map dimensions
      this.colCount = finalMap.length;
      this.rowCount = finalMap[0].length;

      // Create the objects
      for (let r = 0 ; r < finalMap.length ; r++) {
         for (let c = 0; c < finalMap[r].length ; c++) {
            // Translate the indexes to x, y coordinates
            let x = c * win.height / this.rowCount;
            let y = r * win.width / this.colCount;
            let w = win.width / this.colCount;
            let h = win.height / this.rowCount;

            let packet = [x, y, w, h];

            if (0) // Keep alphabetized...
               return;
            else if (finalMap[r][c] == '1')
               this.sz_t1.push(packet);
            else if (finalMap[r][c] == '2')
               this.sz_t2.push(packet);
            else if (finalMap[r][c] == '3')
               this.sz_t3.push(packet);
            else if (finalMap[r][c] == '4')
               this.sz_t4.push(packet);
            else if (finalMap[r][c] == '5')
               this.sz_t5.push(packet);
            else if (finalMap[r][c] == '6')
               this.sz_t6.push(packet);
            else if (finalMap[r][c] == '7')
               this.sz_t7.push(packet);
            else if (finalMap[r][c] == '8')
               this.sz_t8.push(packet);
            else if (finalMap[r][c] == '9')
               this.sz_t9.push(packet);
            else if (finalMap[r][c] == 'W')
               this.features.push(new Wall(createVector(x, y), w, h));
            else if (finalMap[r][c] == 'O')
               this.features.push(new Obstacle(createVector(x, y), w, h));
            else if (finalMap[r][c] == 'D')
               this.dropZone.push(packet);
            else if (finalMap[r][c] == 'B')
               this.buzzSpawn.push(packet);
            else if (finalMap[r][c] == 'N')
               this.nukeSpawn.push(packet);
         }
      }
   }

   render() {
      // calls the render of each of its sub-objects
      this.features.forEach(feature => {
         feature.render();
      });
   }
}